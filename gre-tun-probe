#!/bin/bash
function quit() {
        echo -e $1
        exit -1
}

function cleanup(){
    test -z "$clean" || return
    echo -e "\nCleaning up"
    echo Removing rules for in_port=$port from $bridge
    ovs-ofctl del-flows $bridge "in_port=$port"
        echo  "Removing ${veths[0]} from $bridge"
    ovs-vsctl del-port $bridge ${veths[0]}
    echo "Removing ${veths[*]}"
        ip link del ${veths[0]}
    clean="already" #protection againts double call in buggy bashes
}

test -n "$3" || quit "Usage: gre-tun-probe [-c number of probes] bridge gre_num out_port [SOURCE IP] [DEST IP] [DEST MAC] \nexamples:\n\tgre-tun-probe br-tun 0x1 2\n\tgre-tun-probe -c 0 br-tun 0x5 15 192.168.1.3 192.168.1.1 10:0b:a9:bd:26:a8 200\n-c number of probes - amount of packets ot send, 0 means endless, Ctrl-C to break\nbridge - openvswitch bridge name (f.e. br-tun, br-int)\ngre_num - GRE tunnel number, f.e. 0x1, 0x100, or just 5\nout_port - numeric port to send GRE traffic within OVS bridge. Can be observed with ovs-ofctl dump-port-desc br_name\nSOURCE IP - source ip in generated icmp packets\nDEST IP - destignation ip in generated icmp packets\nDEST MAC - destignation MAC address"
test -x "`which ovs-vsctl`"|| quit "openvswitch is not installed. Is this openstack host?"
test -x "`which nping`" || quit "nping not found. Nping can be found in newer verison of nmap. Unfortunately, Ubuntu 12.04's nmap is too old, upgrade it to raring/saucy/trusty"
test -x "`which ip`"|| quit "iproute2's ip command not found. This is not normal."

trap cleanup INT
trap cleanup HUP

if [ "$1" = "-c" ]; then
    count="-c $2"
    shift 2
fi

bridge=$1
gre=$2
out=$3

echo "Setting up:"
ip link add type veth
veths=(`ip l |tail -n 4|egrep -o "veth[0-9]+"`) #race for interface creations here. Should never be used on non-disabled node
echo Create pair of veth interfaces: ${veths[*]}
ip link set up dev ${veths[0]}
ip link set up dev ${veths[1]}

echo Adding fake IP to ${veths[1]}
ip a a 240.0.0.1/24 dev ${veths[1]} #240.0.0.0 - experimental block ( == free for use for probing)
echo Adding ${veths[0]} to $bridge
ovs-vsctl add-port $bridge ${veths[0]}

#TODO:
port=`ovs-ofctl dump-ports-desc $bridge|grep ${veths[0]}|head -n 1|awk -F '(' '{print $1}'` #assigned port number to the last port in bridge (race prone!)
echo "${veths[0]} is using port $port in bridge $bridge"
rule_num=$((RANDOM + 1000)) #neutron use lower rules number
rule="priority=$rule_num,in_port=$port actions=set_tunnel:$gre,output:$out"
echo will apply rule $rule to bridge $bridge
ovs-ofctl add-flow $bridge "$rule"


#setup done, preparing nping args
test -n "$4" && source_ip="--source-ip $4"
if  [ -n "$5" ]
then
    dest_ip="--dest-ip $5"
else
    dest_ip="--dest-ip 240.0.0.2" #again, experimental range, should not be used anyone but me
fi
echo dest=$dest_ip "$5"

if [ -n "$6" ]
then
    dest_mac="--dest-mac $6"
else
    dest_mac="--dest-mac 10:0b:a9:bd:26:a8" #my laptop's wifi MAC. Should never appear in real server wired networks
fi

#calling nping
echo "will call nping $count --icmp --icmp-type 0 $source_ip $dest_ip $dest_mac -e ${veths[1]}"
nping $count --icmp --icmp-type 0 $source_ip $dest_ip $dest_mac -e ${veths[1]}

cleanup

